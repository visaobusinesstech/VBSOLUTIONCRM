/**
 * Script de debug para verificar o sistema de Sprints
 */

const { createClient } = require('@supabase/supabase-js');

const SUPABASE_URL = process.env.SUPABASE_URL || 'https://nrbsocawokmihvxfcpso.supabase.co';
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5yYnNvY2F3b2ttaWh2eGZjcHNvIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NjQ3NDA1MywiZXhwIjoyMDcyMDUwMDUzfQ.w6EJDzQj1fffHJ4lYzOVDLydqhbhGOW5KtGBDjaHfPA';

const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY);

async function debugSprints() {
  console.log('üîç Debugando sistema de Sprints...');
  
  try {
    // 1. Verificar estrutura da tabela sprints
    console.log('\nüìã Verificando tabela sprints...');
    const { data: sprintsData, error: sprintsError } = await supabase
      .from('sprints')
      .select('*')
      .limit(5);
    
    if (sprintsError) {
      console.error('‚ùå Erro ao buscar sprints:', sprintsError);
    } else {
      console.log('‚úÖ Sprints encontradas:', sprintsData);
    }
    
    // 2. Verificar estrutura da tabela activities
    console.log('\nüìã Verificando tabela activities...');
    const { data: activitiesData, error: activitiesError } = await supabase
      .from('activities')
      .select('id, title, status, sprint_id')
      .limit(5);
    
    if (activitiesError) {
      console.error('‚ùå Erro ao buscar activities:', activitiesError);
    } else {
      console.log('‚úÖ Activities encontradas:', activitiesData);
    }
    
    // 3. Testar cria√ß√£o de uma sprint
    console.log('\nüß™ Testando cria√ß√£o de sprint...');
    const testSprint = {
      nome: 'Sprint Teste Debug',
      data_inicio: new Date().toISOString(),
      status: 'em_andamento',
      owner_id: '00000000-0000-0000-0000-000000000000' // UUID fict√≠cio para teste
    };
    
    const { data: newSprint, error: createError } = await supabase
      .from('sprints')
      .insert(testSprint)
      .select()
      .single();
    
    if (createError) {
      console.error('‚ùå Erro ao criar sprint:', createError);
    } else {
      console.log('‚úÖ Sprint criada com sucesso:', newSprint);
      
      // Deletar sprint de teste
      await supabase
        .from('sprints')
        .delete()
        .eq('id', newSprint.id);
      console.log('üóëÔ∏è Sprint de teste removida');
    }
    
    // 4. Verificar pol√≠ticas RLS
    console.log('\nüîí Verificando pol√≠ticas RLS...');
    const { data: policies, error: policiesError } = await supabase
      .from('pg_policies')
      .select('*')
      .eq('tablename', 'sprints');
    
    if (policiesError) {
      console.log('‚ö†Ô∏è N√£o foi poss√≠vel verificar pol√≠ticas:', policiesError.message);
    } else {
      console.log('‚úÖ Pol√≠ticas encontradas:', policies);
    }
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

debugSprints();
